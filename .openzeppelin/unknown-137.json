{
  "manifestVersion": "3.2",
  "admin": {
    "address": "0x8707a3e93D119b159cdCC6D4a449eB06D9E7502E",
    "txHash": "0xc36294a35ecc88a605c51e1ff2888c063c9fbccdfaff159028383eb5530faa15"
  },
  "proxies": [
    {
      "address": "0x1326b80BdbeD8961d6ba875Bd07d3aB96b393Ad3",
      "txHash": "0x4f0c92b6cb24d14c69a6ed83d298e94a436cd43e55a8542d56ba48fbcfac88d6",
      "kind": "transparent"
    },
    {
      "address": "0x627e6560514DaED618b3a4a1ef168730D78Eec72",
      "txHash": "0xcc8ab86af805db268991d4ce84dc4b2e2622d466393e3213ecf430addc3195d3",
      "kind": "transparent"
    },
    {
      "address": "0x5978B27BE2dc4217232Fa450047a0C0A28f150b2",
      "txHash": "0xe02224fc50f347abba326bc879693fe016818ae909a1e1ff527b78dea1bb8953",
      "kind": "transparent"
    },
    {
      "address": "0x8a6AB90400624c290C686454Ee737999B39609F5",
      "txHash": "0xf193fdb19cb961caed9e7f79cdb0c70bc7100bd8e08869f4be775e38a26cdfb5",
      "kind": "transparent"
    },
    {
      "address": "0x3138768344659d26403170001360F67049F4Aa3e",
      "txHash": "0x812ba1b11f62a76cf99201847a7895735be1bdf13b174c222b6e308e10da9fb1",
      "kind": "transparent"
    }
  ],
  "impls": {
    "808578b09ce3b84d4379bc31930a9c358b3ca477b180cb8021b48a0bcff293ea": {
      "address": "0xA9b2f0AE2d241Da249ab9d41e8b58D5EE2d0F72c",
      "txHash": "0xa6d8f6e14d9e49a68e2dc498eec46edfb4fe32622d7c21ba906c3c07c4fd28b2",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:39"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:44"
          },
          {
            "contract": "EternalStorage",
            "label": "uint256Storage",
            "type": "t_mapping(t_bytes32,t_uint256)",
            "src": "..\\project:\\contracts\\storages\\EternalStorage.sol:11"
          },
          {
            "contract": "EternalStorage",
            "label": "stringStorage",
            "type": "t_mapping(t_bytes32,t_string_storage)",
            "src": "..\\project:\\contracts\\storages\\EternalStorage.sol:12"
          },
          {
            "contract": "EternalStorage",
            "label": "addressStorage",
            "type": "t_mapping(t_bytes32,t_address)",
            "src": "..\\project:\\contracts\\storages\\EternalStorage.sol:13"
          },
          {
            "contract": "EternalStorage",
            "label": "bytesStorage",
            "type": "t_mapping(t_bytes32,t_bytes_storage)",
            "src": "..\\project:\\contracts\\storages\\EternalStorage.sol:14"
          },
          {
            "contract": "EternalStorage",
            "label": "boolStorage",
            "type": "t_mapping(t_bytes32,t_bool)",
            "src": "..\\project:\\contracts\\storages\\EternalStorage.sol:15"
          },
          {
            "contract": "EternalStorage",
            "label": "intStorage",
            "type": "t_mapping(t_bytes32,t_int256)",
            "src": "..\\project:\\contracts\\storages\\EternalStorage.sol:16"
          },
          {
            "contract": "EternalStorage",
            "label": "bytes32Storage",
            "type": "t_mapping(t_bytes32,t_bytes32)",
            "src": "..\\project:\\contracts\\storages\\EternalStorage.sol:17"
          },
          {
            "contract": "EternalStorage",
            "label": "bytes32ArrayStorage",
            "type": "t_mapping(t_bytes32,t_array(t_bytes32)dyn_storage)",
            "src": "..\\project:\\contracts\\storages\\EternalStorage.sol:20"
          },
          {
            "contract": "EternalStorage",
            "label": "uint256ArrayStorage",
            "type": "t_mapping(t_bytes32,t_array(t_uint256)dyn_storage)",
            "src": "..\\project:\\contracts\\storages\\EternalStorage.sol:21"
          },
          {
            "contract": "EternalStorage",
            "label": "int256ArrayStorage",
            "type": "t_mapping(t_bytes32,t_array(t_int256)dyn_storage)",
            "src": "..\\project:\\contracts\\storages\\EternalStorage.sol:22"
          },
          {
            "contract": "EternalStorage",
            "label": "addressArrayStorage",
            "type": "t_mapping(t_bytes32,t_array(t_address)dyn_storage)",
            "src": "..\\project:\\contracts\\storages\\EternalStorage.sol:23"
          },
          {
            "contract": "EternalStorage",
            "label": "stringArrayStorage",
            "type": "t_mapping(t_bytes32,t_array(t_string_storage)dyn_storage)",
            "src": "..\\project:\\contracts\\storages\\EternalStorage.sol:24"
          },
          {
            "contract": "EternalStorage",
            "label": "bytesArrayStorage",
            "type": "t_mapping(t_bytes32,t_array(t_bytes_storage)dyn_storage)",
            "src": "..\\project:\\contracts\\storages\\EternalStorage.sol:25"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\utils\\ContextUpgradeable.sol:36"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:87"
          }
        ],
        "types": {
          "t_address": {
            "label": "address"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_mapping(t_bytes32,t_string_storage)": {
            "label": "mapping(bytes32 => string)"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_mapping(t_bytes32,t_address)": {
            "label": "mapping(bytes32 => address)"
          },
          "t_mapping(t_bytes32,t_bytes_storage)": {
            "label": "mapping(bytes32 => bytes)"
          },
          "t_bytes_storage": {
            "label": "bytes"
          },
          "t_mapping(t_bytes32,t_bool)": {
            "label": "mapping(bytes32 => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_mapping(t_bytes32,t_int256)": {
            "label": "mapping(bytes32 => int256)"
          },
          "t_int256": {
            "label": "int256"
          },
          "t_mapping(t_bytes32,t_bytes32)": {
            "label": "mapping(bytes32 => bytes32)"
          },
          "t_mapping(t_bytes32,t_array(t_bytes32)dyn_storage)": {
            "label": "mapping(bytes32 => bytes32[])"
          },
          "t_array(t_bytes32)dyn_storage": {
            "label": "bytes32[]"
          },
          "t_mapping(t_bytes32,t_array(t_uint256)dyn_storage)": {
            "label": "mapping(bytes32 => uint256[])"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_mapping(t_bytes32,t_array(t_int256)dyn_storage)": {
            "label": "mapping(bytes32 => int256[])"
          },
          "t_array(t_int256)dyn_storage": {
            "label": "int256[]"
          },
          "t_mapping(t_bytes32,t_array(t_address)dyn_storage)": {
            "label": "mapping(bytes32 => address[])"
          },
          "t_array(t_address)dyn_storage": {
            "label": "address[]"
          },
          "t_mapping(t_bytes32,t_array(t_string_storage)dyn_storage)": {
            "label": "mapping(bytes32 => string[])"
          },
          "t_array(t_string_storage)dyn_storage": {
            "label": "string[]"
          },
          "t_mapping(t_bytes32,t_array(t_bytes_storage)dyn_storage)": {
            "label": "mapping(bytes32 => bytes[])"
          },
          "t_array(t_bytes_storage)dyn_storage": {
            "label": "bytes[]"
          }
        }
      }
    },
    "22d42a31f814cf9b2009c783bfa083a9415e42c99fc1a10ccdf5554e04e939b5": {
      "address": "0xE096112d497129e5b364709096587B6816310C02",
      "txHash": "0x5e424c4e837ebd56bfb9cdb2bb7b446d0e24db2efab4679337153eeb69f9ce30",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:39"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:44"
          },
          {
            "contract": "EternalStorage",
            "label": "uint256Storage",
            "type": "t_mapping(t_bytes32,t_uint256)",
            "src": "..\\project:\\contracts\\storages\\EternalStorage.sol:11"
          },
          {
            "contract": "EternalStorage",
            "label": "stringStorage",
            "type": "t_mapping(t_bytes32,t_string_storage)",
            "src": "..\\project:\\contracts\\storages\\EternalStorage.sol:12"
          },
          {
            "contract": "EternalStorage",
            "label": "addressStorage",
            "type": "t_mapping(t_bytes32,t_address)",
            "src": "..\\project:\\contracts\\storages\\EternalStorage.sol:13"
          },
          {
            "contract": "EternalStorage",
            "label": "bytesStorage",
            "type": "t_mapping(t_bytes32,t_bytes_storage)",
            "src": "..\\project:\\contracts\\storages\\EternalStorage.sol:14"
          },
          {
            "contract": "EternalStorage",
            "label": "boolStorage",
            "type": "t_mapping(t_bytes32,t_bool)",
            "src": "..\\project:\\contracts\\storages\\EternalStorage.sol:15"
          },
          {
            "contract": "EternalStorage",
            "label": "intStorage",
            "type": "t_mapping(t_bytes32,t_int256)",
            "src": "..\\project:\\contracts\\storages\\EternalStorage.sol:16"
          },
          {
            "contract": "EternalStorage",
            "label": "bytes32Storage",
            "type": "t_mapping(t_bytes32,t_bytes32)",
            "src": "..\\project:\\contracts\\storages\\EternalStorage.sol:17"
          },
          {
            "contract": "EternalStorage",
            "label": "bytes32ArrayStorage",
            "type": "t_mapping(t_bytes32,t_array(t_bytes32)dyn_storage)",
            "src": "..\\project:\\contracts\\storages\\EternalStorage.sol:20"
          },
          {
            "contract": "EternalStorage",
            "label": "uint256ArrayStorage",
            "type": "t_mapping(t_bytes32,t_array(t_uint256)dyn_storage)",
            "src": "..\\project:\\contracts\\storages\\EternalStorage.sol:21"
          },
          {
            "contract": "EternalStorage",
            "label": "int256ArrayStorage",
            "type": "t_mapping(t_bytes32,t_array(t_int256)dyn_storage)",
            "src": "..\\project:\\contracts\\storages\\EternalStorage.sol:22"
          },
          {
            "contract": "EternalStorage",
            "label": "addressArrayStorage",
            "type": "t_mapping(t_bytes32,t_array(t_address)dyn_storage)",
            "src": "..\\project:\\contracts\\storages\\EternalStorage.sol:23"
          },
          {
            "contract": "EternalStorage",
            "label": "stringArrayStorage",
            "type": "t_mapping(t_bytes32,t_array(t_string_storage)dyn_storage)",
            "src": "..\\project:\\contracts\\storages\\EternalStorage.sol:24"
          },
          {
            "contract": "EternalStorage",
            "label": "bytesArrayStorage",
            "type": "t_mapping(t_bytes32,t_array(t_bytes_storage)dyn_storage)",
            "src": "..\\project:\\contracts\\storages\\EternalStorage.sol:25"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\utils\\ContextUpgradeable.sol:36"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:87"
          }
        ],
        "types": {
          "t_address": {
            "label": "address"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_mapping(t_bytes32,t_string_storage)": {
            "label": "mapping(bytes32 => string)"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_mapping(t_bytes32,t_address)": {
            "label": "mapping(bytes32 => address)"
          },
          "t_mapping(t_bytes32,t_bytes_storage)": {
            "label": "mapping(bytes32 => bytes)"
          },
          "t_bytes_storage": {
            "label": "bytes"
          },
          "t_mapping(t_bytes32,t_bool)": {
            "label": "mapping(bytes32 => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_mapping(t_bytes32,t_int256)": {
            "label": "mapping(bytes32 => int256)"
          },
          "t_int256": {
            "label": "int256"
          },
          "t_mapping(t_bytes32,t_bytes32)": {
            "label": "mapping(bytes32 => bytes32)"
          },
          "t_mapping(t_bytes32,t_array(t_bytes32)dyn_storage)": {
            "label": "mapping(bytes32 => bytes32[])"
          },
          "t_array(t_bytes32)dyn_storage": {
            "label": "bytes32[]"
          },
          "t_mapping(t_bytes32,t_array(t_uint256)dyn_storage)": {
            "label": "mapping(bytes32 => uint256[])"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_mapping(t_bytes32,t_array(t_int256)dyn_storage)": {
            "label": "mapping(bytes32 => int256[])"
          },
          "t_array(t_int256)dyn_storage": {
            "label": "int256[]"
          },
          "t_mapping(t_bytes32,t_array(t_address)dyn_storage)": {
            "label": "mapping(bytes32 => address[])"
          },
          "t_array(t_address)dyn_storage": {
            "label": "address[]"
          },
          "t_mapping(t_bytes32,t_array(t_string_storage)dyn_storage)": {
            "label": "mapping(bytes32 => string[])"
          },
          "t_array(t_string_storage)dyn_storage": {
            "label": "string[]"
          },
          "t_mapping(t_bytes32,t_array(t_bytes_storage)dyn_storage)": {
            "label": "mapping(bytes32 => bytes[])"
          },
          "t_array(t_bytes_storage)dyn_storage": {
            "label": "bytes[]"
          }
        }
      }
    },
    "0e99b1a047502851f777609cd207ce9e77bd14c933869f683f3afaf605d3d685": {
      "address": "0x62962845Ac5D147019f723256caB10676E85B570",
      "txHash": "0x9ea7a21af085c77d091c9673ba21335115218ca2110e71763d5dd02afd87c1c8",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:39"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:44"
          },
          {
            "contract": "EternalStorage",
            "label": "uint256Storage",
            "type": "t_mapping(t_bytes32,t_uint256)",
            "src": "..\\project:\\contracts\\storages\\EternalStorage.sol:11"
          },
          {
            "contract": "EternalStorage",
            "label": "stringStorage",
            "type": "t_mapping(t_bytes32,t_string_storage)",
            "src": "..\\project:\\contracts\\storages\\EternalStorage.sol:12"
          },
          {
            "contract": "EternalStorage",
            "label": "addressStorage",
            "type": "t_mapping(t_bytes32,t_address)",
            "src": "..\\project:\\contracts\\storages\\EternalStorage.sol:13"
          },
          {
            "contract": "EternalStorage",
            "label": "bytesStorage",
            "type": "t_mapping(t_bytes32,t_bytes_storage)",
            "src": "..\\project:\\contracts\\storages\\EternalStorage.sol:14"
          },
          {
            "contract": "EternalStorage",
            "label": "boolStorage",
            "type": "t_mapping(t_bytes32,t_bool)",
            "src": "..\\project:\\contracts\\storages\\EternalStorage.sol:15"
          },
          {
            "contract": "EternalStorage",
            "label": "intStorage",
            "type": "t_mapping(t_bytes32,t_int256)",
            "src": "..\\project:\\contracts\\storages\\EternalStorage.sol:16"
          },
          {
            "contract": "EternalStorage",
            "label": "bytes32Storage",
            "type": "t_mapping(t_bytes32,t_bytes32)",
            "src": "..\\project:\\contracts\\storages\\EternalStorage.sol:17"
          },
          {
            "contract": "EternalStorage",
            "label": "bytes32ArrayStorage",
            "type": "t_mapping(t_bytes32,t_array(t_bytes32)dyn_storage)",
            "src": "..\\project:\\contracts\\storages\\EternalStorage.sol:20"
          },
          {
            "contract": "EternalStorage",
            "label": "uint256ArrayStorage",
            "type": "t_mapping(t_bytes32,t_array(t_uint256)dyn_storage)",
            "src": "..\\project:\\contracts\\storages\\EternalStorage.sol:21"
          },
          {
            "contract": "EternalStorage",
            "label": "int256ArrayStorage",
            "type": "t_mapping(t_bytes32,t_array(t_int256)dyn_storage)",
            "src": "..\\project:\\contracts\\storages\\EternalStorage.sol:22"
          },
          {
            "contract": "EternalStorage",
            "label": "addressArrayStorage",
            "type": "t_mapping(t_bytes32,t_array(t_address)dyn_storage)",
            "src": "..\\project:\\contracts\\storages\\EternalStorage.sol:23"
          },
          {
            "contract": "EternalStorage",
            "label": "stringArrayStorage",
            "type": "t_mapping(t_bytes32,t_array(t_string_storage)dyn_storage)",
            "src": "..\\project:\\contracts\\storages\\EternalStorage.sol:24"
          },
          {
            "contract": "EternalStorage",
            "label": "bytesArrayStorage",
            "type": "t_mapping(t_bytes32,t_array(t_bytes_storage)dyn_storage)",
            "src": "..\\project:\\contracts\\storages\\EternalStorage.sol:25"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\utils\\ContextUpgradeable.sol:36"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:87"
          }
        ],
        "types": {
          "t_address": {
            "label": "address"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_mapping(t_bytes32,t_string_storage)": {
            "label": "mapping(bytes32 => string)"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_mapping(t_bytes32,t_address)": {
            "label": "mapping(bytes32 => address)"
          },
          "t_mapping(t_bytes32,t_bytes_storage)": {
            "label": "mapping(bytes32 => bytes)"
          },
          "t_bytes_storage": {
            "label": "bytes"
          },
          "t_mapping(t_bytes32,t_bool)": {
            "label": "mapping(bytes32 => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_mapping(t_bytes32,t_int256)": {
            "label": "mapping(bytes32 => int256)"
          },
          "t_int256": {
            "label": "int256"
          },
          "t_mapping(t_bytes32,t_bytes32)": {
            "label": "mapping(bytes32 => bytes32)"
          },
          "t_mapping(t_bytes32,t_array(t_bytes32)dyn_storage)": {
            "label": "mapping(bytes32 => bytes32[])"
          },
          "t_array(t_bytes32)dyn_storage": {
            "label": "bytes32[]"
          },
          "t_mapping(t_bytes32,t_array(t_uint256)dyn_storage)": {
            "label": "mapping(bytes32 => uint256[])"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_mapping(t_bytes32,t_array(t_int256)dyn_storage)": {
            "label": "mapping(bytes32 => int256[])"
          },
          "t_array(t_int256)dyn_storage": {
            "label": "int256[]"
          },
          "t_mapping(t_bytes32,t_array(t_address)dyn_storage)": {
            "label": "mapping(bytes32 => address[])"
          },
          "t_array(t_address)dyn_storage": {
            "label": "address[]"
          },
          "t_mapping(t_bytes32,t_array(t_string_storage)dyn_storage)": {
            "label": "mapping(bytes32 => string[])"
          },
          "t_array(t_string_storage)dyn_storage": {
            "label": "string[]"
          },
          "t_mapping(t_bytes32,t_array(t_bytes_storage)dyn_storage)": {
            "label": "mapping(bytes32 => bytes[])"
          },
          "t_array(t_bytes_storage)dyn_storage": {
            "label": "bytes[]"
          }
        }
      }
    },
    "22af921eb342c78a9431a0b405a7e14b9b4b28719447e7bd307350bacc80b13f": {
      "address": "0x208b817f6B47a48da221647e1cE2F4D0f1dBcde5",
      "txHash": "0xf655978915629a73960fba1d49e059a189c056dac999ba8ac713b5b9c64cd8aa",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:39"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:44"
          },
          {
            "contract": "EternalStorage",
            "label": "uint256Storage",
            "type": "t_mapping(t_bytes32,t_uint256)",
            "src": "..\\project:\\contracts\\storages\\EternalStorage.sol:11"
          },
          {
            "contract": "EternalStorage",
            "label": "stringStorage",
            "type": "t_mapping(t_bytes32,t_string_storage)",
            "src": "..\\project:\\contracts\\storages\\EternalStorage.sol:12"
          },
          {
            "contract": "EternalStorage",
            "label": "addressStorage",
            "type": "t_mapping(t_bytes32,t_address)",
            "src": "..\\project:\\contracts\\storages\\EternalStorage.sol:13"
          },
          {
            "contract": "EternalStorage",
            "label": "bytesStorage",
            "type": "t_mapping(t_bytes32,t_bytes_storage)",
            "src": "..\\project:\\contracts\\storages\\EternalStorage.sol:14"
          },
          {
            "contract": "EternalStorage",
            "label": "boolStorage",
            "type": "t_mapping(t_bytes32,t_bool)",
            "src": "..\\project:\\contracts\\storages\\EternalStorage.sol:15"
          },
          {
            "contract": "EternalStorage",
            "label": "intStorage",
            "type": "t_mapping(t_bytes32,t_int256)",
            "src": "..\\project:\\contracts\\storages\\EternalStorage.sol:16"
          },
          {
            "contract": "EternalStorage",
            "label": "bytes32Storage",
            "type": "t_mapping(t_bytes32,t_bytes32)",
            "src": "..\\project:\\contracts\\storages\\EternalStorage.sol:17"
          },
          {
            "contract": "EternalStorage",
            "label": "bytes32ArrayStorage",
            "type": "t_mapping(t_bytes32,t_array(t_bytes32)dyn_storage)",
            "src": "..\\project:\\contracts\\storages\\EternalStorage.sol:20"
          },
          {
            "contract": "EternalStorage",
            "label": "uint256ArrayStorage",
            "type": "t_mapping(t_bytes32,t_array(t_uint256)dyn_storage)",
            "src": "..\\project:\\contracts\\storages\\EternalStorage.sol:21"
          },
          {
            "contract": "EternalStorage",
            "label": "int256ArrayStorage",
            "type": "t_mapping(t_bytes32,t_array(t_int256)dyn_storage)",
            "src": "..\\project:\\contracts\\storages\\EternalStorage.sol:22"
          },
          {
            "contract": "EternalStorage",
            "label": "addressArrayStorage",
            "type": "t_mapping(t_bytes32,t_array(t_address)dyn_storage)",
            "src": "..\\project:\\contracts\\storages\\EternalStorage.sol:23"
          },
          {
            "contract": "EternalStorage",
            "label": "stringArrayStorage",
            "type": "t_mapping(t_bytes32,t_array(t_string_storage)dyn_storage)",
            "src": "..\\project:\\contracts\\storages\\EternalStorage.sol:24"
          },
          {
            "contract": "EternalStorage",
            "label": "bytesArrayStorage",
            "type": "t_mapping(t_bytes32,t_array(t_bytes_storage)dyn_storage)",
            "src": "..\\project:\\contracts\\storages\\EternalStorage.sol:25"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\utils\\ContextUpgradeable.sol:36"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:87"
          }
        ],
        "types": {
          "t_address": {
            "label": "address"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_mapping(t_bytes32,t_string_storage)": {
            "label": "mapping(bytes32 => string)"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_mapping(t_bytes32,t_address)": {
            "label": "mapping(bytes32 => address)"
          },
          "t_mapping(t_bytes32,t_bytes_storage)": {
            "label": "mapping(bytes32 => bytes)"
          },
          "t_bytes_storage": {
            "label": "bytes"
          },
          "t_mapping(t_bytes32,t_bool)": {
            "label": "mapping(bytes32 => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_mapping(t_bytes32,t_int256)": {
            "label": "mapping(bytes32 => int256)"
          },
          "t_int256": {
            "label": "int256"
          },
          "t_mapping(t_bytes32,t_bytes32)": {
            "label": "mapping(bytes32 => bytes32)"
          },
          "t_mapping(t_bytes32,t_array(t_bytes32)dyn_storage)": {
            "label": "mapping(bytes32 => bytes32[])"
          },
          "t_array(t_bytes32)dyn_storage": {
            "label": "bytes32[]"
          },
          "t_mapping(t_bytes32,t_array(t_uint256)dyn_storage)": {
            "label": "mapping(bytes32 => uint256[])"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_mapping(t_bytes32,t_array(t_int256)dyn_storage)": {
            "label": "mapping(bytes32 => int256[])"
          },
          "t_array(t_int256)dyn_storage": {
            "label": "int256[]"
          },
          "t_mapping(t_bytes32,t_array(t_address)dyn_storage)": {
            "label": "mapping(bytes32 => address[])"
          },
          "t_array(t_address)dyn_storage": {
            "label": "address[]"
          },
          "t_mapping(t_bytes32,t_array(t_string_storage)dyn_storage)": {
            "label": "mapping(bytes32 => string[])"
          },
          "t_array(t_string_storage)dyn_storage": {
            "label": "string[]"
          },
          "t_mapping(t_bytes32,t_array(t_bytes_storage)dyn_storage)": {
            "label": "mapping(bytes32 => bytes[])"
          },
          "t_array(t_bytes_storage)dyn_storage": {
            "label": "bytes[]"
          }
        }
      }
    },
    "4009e95d306a569870bac69cb51b2421c7a97d3dda15a8c0c42be1ee4f904819": {
      "address": "0x00194505c56E62F0eaD81Dba42226Fd439dcCabF",
      "txHash": "0x4b0ac969cfb05957f77422142c74491ef79cb657097402ae9776fd87726990bd",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:39"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:44"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\utils\\ContextUpgradeable.sol:36"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:87"
          },
          {
            "contract": "Totee",
            "label": "_user",
            "type": "t_contract(User)2964",
            "src": "..\\project:\\contracts\\Totee.sol:26"
          },
          {
            "contract": "Totee",
            "label": "_content",
            "type": "t_contract(Content)2383",
            "src": "..\\project:\\contracts\\Totee.sol:27"
          },
          {
            "contract": "Totee",
            "label": "_explore",
            "type": "t_contract(Explore)2702",
            "src": "..\\project:\\contracts\\Totee.sol:28"
          },
          {
            "contract": "Totee",
            "label": "_comment",
            "type": "t_contract(Comment)2173",
            "src": "..\\project:\\contracts\\Totee.sol:29"
          }
        ],
        "types": {
          "t_contract(User)2964": {
            "label": "contract User"
          },
          "t_contract(Content)2383": {
            "label": "contract Content"
          },
          "t_contract(Explore)2702": {
            "label": "contract Explore"
          },
          "t_contract(Comment)2173": {
            "label": "contract Comment"
          },
          "t_address": {
            "label": "address"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_bool": {
            "label": "bool"
          }
        }
      }
    },
    "c637b9dbce4ba2689475917e402b58da10f612d9066acba9541da723c5de5e02": {
      "address": "0x4A42bdE51aBEF0A4Bb9a30bd2B2437EF47e7F354",
      "txHash": "0x2fe6b17b6009bb9ff137ea5ed89bcbf5b11882603768debafb13caa747347bb4",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:39"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:44"
          },
          {
            "contract": "EternalStorage",
            "label": "uint256Storage",
            "type": "t_mapping(t_bytes32,t_uint256)",
            "src": "..\\project:\\contracts\\storages\\EternalStorage.sol:11"
          },
          {
            "contract": "EternalStorage",
            "label": "stringStorage",
            "type": "t_mapping(t_bytes32,t_string_storage)",
            "src": "..\\project:\\contracts\\storages\\EternalStorage.sol:12"
          },
          {
            "contract": "EternalStorage",
            "label": "addressStorage",
            "type": "t_mapping(t_bytes32,t_address)",
            "src": "..\\project:\\contracts\\storages\\EternalStorage.sol:13"
          },
          {
            "contract": "EternalStorage",
            "label": "bytesStorage",
            "type": "t_mapping(t_bytes32,t_bytes_storage)",
            "src": "..\\project:\\contracts\\storages\\EternalStorage.sol:14"
          },
          {
            "contract": "EternalStorage",
            "label": "boolStorage",
            "type": "t_mapping(t_bytes32,t_bool)",
            "src": "..\\project:\\contracts\\storages\\EternalStorage.sol:15"
          },
          {
            "contract": "EternalStorage",
            "label": "intStorage",
            "type": "t_mapping(t_bytes32,t_int256)",
            "src": "..\\project:\\contracts\\storages\\EternalStorage.sol:16"
          },
          {
            "contract": "EternalStorage",
            "label": "bytes32Storage",
            "type": "t_mapping(t_bytes32,t_bytes32)",
            "src": "..\\project:\\contracts\\storages\\EternalStorage.sol:17"
          },
          {
            "contract": "EternalStorage",
            "label": "bytes32ArrayStorage",
            "type": "t_mapping(t_bytes32,t_array(t_bytes32)dyn_storage)",
            "src": "..\\project:\\contracts\\storages\\EternalStorage.sol:20"
          },
          {
            "contract": "EternalStorage",
            "label": "uint256ArrayStorage",
            "type": "t_mapping(t_bytes32,t_array(t_uint256)dyn_storage)",
            "src": "..\\project:\\contracts\\storages\\EternalStorage.sol:21"
          },
          {
            "contract": "EternalStorage",
            "label": "int256ArrayStorage",
            "type": "t_mapping(t_bytes32,t_array(t_int256)dyn_storage)",
            "src": "..\\project:\\contracts\\storages\\EternalStorage.sol:22"
          },
          {
            "contract": "EternalStorage",
            "label": "addressArrayStorage",
            "type": "t_mapping(t_bytes32,t_array(t_address)dyn_storage)",
            "src": "..\\project:\\contracts\\storages\\EternalStorage.sol:23"
          },
          {
            "contract": "EternalStorage",
            "label": "stringArrayStorage",
            "type": "t_mapping(t_bytes32,t_array(t_string_storage)dyn_storage)",
            "src": "..\\project:\\contracts\\storages\\EternalStorage.sol:24"
          },
          {
            "contract": "EternalStorage",
            "label": "bytesArrayStorage",
            "type": "t_mapping(t_bytes32,t_array(t_bytes_storage)dyn_storage)",
            "src": "..\\project:\\contracts\\storages\\EternalStorage.sol:25"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\utils\\ContextUpgradeable.sol:36"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:87"
          }
        ],
        "types": {
          "t_address": {
            "label": "address"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_mapping(t_bytes32,t_string_storage)": {
            "label": "mapping(bytes32 => string)"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_mapping(t_bytes32,t_address)": {
            "label": "mapping(bytes32 => address)"
          },
          "t_mapping(t_bytes32,t_bytes_storage)": {
            "label": "mapping(bytes32 => bytes)"
          },
          "t_bytes_storage": {
            "label": "bytes"
          },
          "t_mapping(t_bytes32,t_bool)": {
            "label": "mapping(bytes32 => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_mapping(t_bytes32,t_int256)": {
            "label": "mapping(bytes32 => int256)"
          },
          "t_int256": {
            "label": "int256"
          },
          "t_mapping(t_bytes32,t_bytes32)": {
            "label": "mapping(bytes32 => bytes32)"
          },
          "t_mapping(t_bytes32,t_array(t_bytes32)dyn_storage)": {
            "label": "mapping(bytes32 => bytes32[])"
          },
          "t_array(t_bytes32)dyn_storage": {
            "label": "bytes32[]"
          },
          "t_mapping(t_bytes32,t_array(t_uint256)dyn_storage)": {
            "label": "mapping(bytes32 => uint256[])"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_mapping(t_bytes32,t_array(t_int256)dyn_storage)": {
            "label": "mapping(bytes32 => int256[])"
          },
          "t_array(t_int256)dyn_storage": {
            "label": "int256[]"
          },
          "t_mapping(t_bytes32,t_array(t_address)dyn_storage)": {
            "label": "mapping(bytes32 => address[])"
          },
          "t_array(t_address)dyn_storage": {
            "label": "address[]"
          },
          "t_mapping(t_bytes32,t_array(t_string_storage)dyn_storage)": {
            "label": "mapping(bytes32 => string[])"
          },
          "t_array(t_string_storage)dyn_storage": {
            "label": "string[]"
          },
          "t_mapping(t_bytes32,t_array(t_bytes_storage)dyn_storage)": {
            "label": "mapping(bytes32 => bytes[])"
          },
          "t_array(t_bytes_storage)dyn_storage": {
            "label": "bytes[]"
          }
        }
      }
    },
    "78eee999c6a10af6173147d1abfe1bca600afffb0af801519d56334c5621543f": {
      "address": "0x3D12EC13Fa325F0Db8aD65BE50052Fb53b349141",
      "txHash": "0x30898e07006069988f63a545dccfea1ac033fcf9b4e7368c94270f4d3563861b",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:39"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:44"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\utils\\ContextUpgradeable.sol:36"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:87"
          },
          {
            "contract": "ToteeV2Retot",
            "label": "_user",
            "type": "t_contract(User)2964",
            "src": "..\\project:\\contracts\\ToteeV2Retot.sol:27"
          },
          {
            "contract": "ToteeV2Retot",
            "label": "_content",
            "type": "t_contract(ContentV2Retot)2643",
            "src": "..\\project:\\contracts\\ToteeV2Retot.sol:28"
          },
          {
            "contract": "ToteeV2Retot",
            "label": "_explore",
            "type": "t_contract(Explore)2702",
            "src": "..\\project:\\contracts\\ToteeV2Retot.sol:29"
          },
          {
            "contract": "ToteeV2Retot",
            "label": "_comment",
            "type": "t_contract(Comment)2173",
            "src": "..\\project:\\contracts\\ToteeV2Retot.sol:30"
          }
        ],
        "types": {
          "t_contract(User)2964": {
            "label": "contract User"
          },
          "t_contract(ContentV2Retot)2643": {
            "label": "contract ContentV2Retot"
          },
          "t_contract(Explore)2702": {
            "label": "contract Explore"
          },
          "t_contract(Comment)2173": {
            "label": "contract Comment"
          },
          "t_address": {
            "label": "address"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_bool": {
            "label": "bool"
          }
        }
      }
    }
  }
}
